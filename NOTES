1. I was confused why pressing the settings icon on the home page would submit the form and take me to the game. Turns out that any button in a form is assumed to submit the form unless you add the attribute type=button.
2. Changes I was making to my css was not being reflected in the home page. The issue was that the browser was caching my static files, so I had to clear the cache. This is something I might need to think about taking into account when I push my website online. https://stackoverflow.com/questions/27911070/
3. When I set abbrev_length to 4 in settings, the first revab came out with 4 letters (good) but the next revab came out with 3 (not good). Solved! This happened because in subsequent rounds, I don't pass an abbrev_length and so it defaulted to 3. I fixed this by setting abbrev_length to be the length of the previous abbreviation if one exists. 
4. Changing rounds in settings isn't affecting the game for some reason. Solved! It was an issue with my regex validating the number of rounds. I wanted the regex to say "a number with one or two digits", but instead it said "a number with two digits", so the number of rounds was always failing the validation. I didn't notice because in that case it defaults to five rounds, which it what I was always playing with anyway. I had to fix the regex in two places, in the index and game views.
5. Do settings changes persist after game ends? They probably don't.
6. To make static files work, need to add STATIC_ROOT to settings.py to indicate the folder from which static files will be served (not really sure why this is necessary but it's in the docs here: https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/#static-root-and-static-url) and run the command 'django-admin collectstatic' which moves the static files to that folder. You also need to update urls.py with the code mentioned in this stack overflow answer: https://stackoverflow.com/a/39907426.
7. When debug mode is off, you need to serve your static files from a production web server like nginx or apache (https://stackoverflow.com/questions/5836674/why-does-debug-false-setting-make-my-django-static-files-access-fail/5836728#5836728). That server should serve files from the folder that the collectstatic command moves the static files to.
8. nginx was having trouble finding my ssl certificates. It's most likely because I was pointing to the actual files, which are in a folder that you can only access as root (I believe). To fix it, I copied the files to another folder and made sure that anyone could read those files, which can be done with 'sudo chmod 444 FILE_NAME'. Very nice explanation of chmod: https://www.tomshardware.com/how-to/change-file-directory-permissions-linux.
9. Rebuilding images caused there to be a bunch of docker images with the repository and tag listed as <none>. To remove these, run 'docker image prune'. More info here: https://stackoverflow.com/a/33913711.
10. Django is being annoying by not collecting my updated static files (I think django is the issue because my backend container has the updated files in the app code but not in the static folder) so after I run 'docker compose up' I run 'python manage.py collectstatic --noinput' on the the backend container. SOLVED! Remove the shared volume (the static folder) before rebuilding the image. Run 'docker compose down --volumes'.